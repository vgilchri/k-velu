load('our-algs.sage')
load('eval.sage')
from ctool import OpCount

k = 3
N = 1744181446877839153621386526356115320876201846660500122944113115724762725018873017819363390363223731696663230060112504390732711299493352765196023299372901958247210947895705230747248254583787278525538505289215855858531487087099693120459307819645833486059517500207933504345396987676757576189928659424150044597895296858717376686315125476120571783498704163749774899201477916339651612007996730419858149399189030121381549087860377684695298565965852932726062524431377580
p = 12037340738208845034383383978222801137092029451270197923071397735408251586669938291587857560356890516069961904754171956588530344066457839297755929645858769
A = 10861338504649280383859950140772947007703646408372831934324660566888732797778932142488253565145603672591944602210571423767689240032829444439469242521864171
t = 4831527553678224802275308937274557675557345835624654080177598658517348268750340769582724073028320586417349667756544333492334380331006517355113637948401390466058756088353754101792931453140684982065203615759600708749394701072298318893239079832813943174680103878692336577134063677774951734598140330814820068138214118722208799685083450072356154524927158348337326590585811402602913052653730555179662463709664903383328390825097999126579774420958041364892139956873622

K.<x> = GF(p^k) # need this in order to have field consisten with point_finding()
A = GF(p)(A)
E = EllipticCurve(K, [0, A, 0, 1, 0])
l = 19

G =  t*(E.random_point())
#G = optimized_point_finding(A,p,k,l,K)
G = [G[0], G[2]]
print("Point G: {}".format(G))
Q = [E.random_point()]#generate_points(E, l-1)
print("Points to eval: {}".format(Q))
print("Computing l :{}".format(l))
OpCount.clean()
images, ker = algorithm_1(G, Q, A, l)
print("algorithm_1 images: {}".format(images))
OpCount.print_results()

OpCount.clean()
a_l = 3
b_k = 1
images = algorithm_7(G, l, k, Q, A, a_l, b_k, p)
print("algorithm_7 images: {}".format(images))
OpCount.print_results()
